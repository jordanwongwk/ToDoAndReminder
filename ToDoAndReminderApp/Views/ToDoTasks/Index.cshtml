@model IEnumerable<ToDoAndReminderApp.Models.ToDoTask>

@{
    ViewData["Title"] = "Task List";
}

<h2>Task List</h2>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        if (Notification.permission != "granted") {
            Notification.requestPermission();
        }
    });

    function CustomNotification(title, desc, url)
    {
        if (Notification.permission != "granted") {
            Notification.requestPermission();
        }
        else
        {
            var notification = new Notification(title, {
                body: desc,
            });

            notification.onclose = function () { console.log('Notification Closed');}
        }
    }
</script>

<p>
    <b>@DateTime.Today.ToString("D") // </b>
    <b id="currentTime"></b>
    <script>
        function RealTimeClockFunction()
        {
            var d = new Date();
            var currentHour = d.getHours();
            var currentMin = d.getMinutes();
            var currentSec = d.getSeconds();
            currentHour = ("0" + currentHour).slice(-2);        // Get only the last 2 digits
            currentMin = ("0" + currentMin).slice(-2);
            currentSec = ("0" + currentSec).slice(-2);

            document.getElementById("currentTime").innerHTML = currentHour + ":" + currentMin + ":" + currentSec;
        }

        setInterval(RealTimeClockFunction, 1000);
    </script>
    <script>
        var d = new Date();
        console.log(d.getHours().toString());
        if (d.getHours() == "16" && d.getMinutes() == "48")
        {
            CustomNotification('Testing La', 'Time is up');
        }
        // Works but not real time
    </script>
    <br />
    <br />
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Status
            </th>
            <th>
                Task
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.IsTaskDone)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.TaskTitle)
            </td>

            <td>
                <a asp-action="Edit" asp-route-id="@item.ToDoTaskID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.ToDoTaskID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.ToDoTaskID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
